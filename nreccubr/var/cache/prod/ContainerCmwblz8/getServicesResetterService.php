<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'services_resetter' shared service.

include_once $this->targetDirs[3].'/vendor/symfony/http-kernel/DependencyInjection/ServicesResetter.php';

return $this->services['services_resetter'] = new \Symfony\Component\HttpKernel\DependencyInjection\ServicesResetter(new RewindableGenerator(function () {
    if (isset($this->services['cache.app'])) {
        yield 'cache.app' => ${($_ = isset($this->services['cache.app']) ? $this->services['cache.app'] : null) && false ?: '_'};
    }
    if (isset($this->services['cache.system'])) {
        yield 'cache.system' => ${($_ = isset($this->services['cache.system']) ? $this->services['cache.system'] : null) && false ?: '_'};
    }
    if (isset($this->services['cache.validator'])) {
        yield 'cache.validator' => ${($_ = isset($this->services['cache.validator']) ? $this->services['cache.validator'] : null) && false ?: '_'};
    }
    if (isset($this->services['cache.serializer'])) {
        yield 'cache.serializer' => ${($_ = isset($this->services['cache.serializer']) ? $this->services['cache.serializer'] : null) && false ?: '_'};
    }
    if (isset($this->services['cache.annotations'])) {
        yield 'cache.annotations' => ${($_ = isset($this->services['cache.annotations']) ? $this->services['cache.annotations'] : null) && false ?: '_'};
    }
    if (isset($this->services['doctrine.app_cache_pool'])) {
        yield 'doctrine.app_cache_pool' => ${($_ = isset($this->services['doctrine.app_cache_pool']) ? $this->services['doctrine.app_cache_pool'] : null) && false ?: '_'};
    }
    if (isset($this->services['debug.stopwatch'])) {
        yield 'debug.stopwatch' => ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : null) && false ?: '_'};
    }
    if (isset($this->services['security.token_storage'])) {
        yield 'security.token_storage' => ${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : null) && false ?: '_'};
    }
    if (isset($this->services['form.type.entity'])) {
        yield 'form.type.entity' => ${($_ = isset($this->services['form.type.entity']) ? $this->services['form.type.entity'] : null) && false ?: '_'};
    }
    if (isset($this->services['monolog.handler.main'])) {
        yield 'monolog.handler.main' => ${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : null) && false ?: '_'};
    }
    if (isset($this->services['monolog.handler.front'])) {
        yield 'monolog.handler.front' => ${($_ = isset($this->services['monolog.handler.front']) ? $this->services['monolog.handler.front'] : null) && false ?: '_'};
    }
    if (isset($this->services['monolog.handler.admin'])) {
        yield 'monolog.handler.admin' => ${($_ = isset($this->services['monolog.handler.admin']) ? $this->services['monolog.handler.admin'] : null) && false ?: '_'};
    }
    if (isset($this->services['monolog.handler.console'])) {
        yield 'monolog.handler.console' => ${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : null) && false ?: '_'};
    }
    if (isset($this->services['monolog.handler.SeShareButton4'])) {
        yield 'monolog.handler.SeShareButton4' => ${($_ = isset($this->services['monolog.handler.SeShareButton4']) ? $this->services['monolog.handler.SeShareButton4'] : null) && false ?: '_'};
    }
    if (isset($this->services['swiftmailer.email_sender.listener'])) {
        yield 'swiftmailer.email_sender.listener' => ${($_ = isset($this->services['swiftmailer.email_sender.listener']) ? $this->services['swiftmailer.email_sender.listener'] : null) && false ?: '_'};
    }
}, function () {
    return 0 + (int) (isset($this->services['cache.app'])) + (int) (isset($this->services['cache.system'])) + (int) (isset($this->services['cache.validator'])) + (int) (isset($this->services['cache.serializer'])) + (int) (isset($this->services['cache.annotations'])) + (int) (isset($this->services['doctrine.app_cache_pool'])) + (int) (isset($this->services['debug.stopwatch'])) + (int) (isset($this->services['security.token_storage'])) + (int) (isset($this->services['form.type.entity'])) + (int) (isset($this->services['monolog.handler.main'])) + (int) (isset($this->services['monolog.handler.front'])) + (int) (isset($this->services['monolog.handler.admin'])) + (int) (isset($this->services['monolog.handler.console'])) + (int) (isset($this->services['monolog.handler.SeShareButton4'])) + (int) (isset($this->services['swiftmailer.email_sender.listener']));
}), ['cache.app' => 'reset', 'cache.system' => 'reset', 'cache.validator' => 'reset', 'cache.serializer' => 'reset', 'cache.annotations' => 'reset', 'doctrine.app_cache_pool' => 'reset', 'debug.stopwatch' => 'reset', 'security.token_storage' => 'setToken', 'form.type.entity' => 'reset', 'monolog.handler.main' => 'reset', 'monolog.handler.front' => 'reset', 'monolog.handler.admin' => 'reset', 'monolog.handler.console' => 'reset', 'monolog.handler.SeShareButton4' => 'reset', 'swiftmailer.email_sender.listener' => 'reset']);
